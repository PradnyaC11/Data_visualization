{"version":3,"file":"static/js/942.bf0f12b1.chunk.js","mappings":"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","sources":["components/FlightRoute.js"],"sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\r\nimport * as d3 from 'd3';\r\nimport '../styles/FlightRoute.css';\r\nimport { AirportContext } from './../AirportContext';\r\n\r\nconst FlightRoute = () => {\r\n    const [selectedAirport, setSelectedAirport] = useState(null);\r\n    const { onSelectAirport } = useContext(AirportContext);\r\n\r\n    useEffect(() => {\r\n        Promise.all([\r\n            d3.json('/data/geojson.json'),\r\n            d3.csv('/data/Airport_Passenger_Count.csv'),\r\n            d3.csv('/data/Flight_Routes.csv')\r\n        ])\r\n            .then(([geoData, cityData, flightRoutes]) => {\r\n                processCityData(cityData);\r\n                renderFlightRoute(geoData, cityData, flightRoutes);\r\n            })\r\n            .catch(error => console.error('Error loading data:', error));\r\n    }, []);\r\n\r\n    const processCityData = (cityData) => {\r\n        cityData.forEach(d => {\r\n            d.departure_count = +d.departure_count;\r\n            d.arrival_count = +d.arrival_count;\r\n            d.total_passenger_count = d.departure_count + d.arrival_count;\r\n\r\n            if (d.total_passenger_count < 50000) {\r\n                d.category = \"low\";\r\n                d.color = \"gold\";\r\n            } else if (d.total_passenger_count >= 50000 && d.total_passenger_count < 200000) {\r\n                d.category = \"medium\";\r\n                d.color = \"red\";\r\n            } else {\r\n                d.category = \"high\";\r\n                d.color = \"navy\";\r\n            }\r\n        });\r\n    };\r\n\r\n    const renderFlightRoute = (geoData, cityData, flightRoutes) => {\r\n        const width = +d3.select(\"#flightRoute\").style(\"width\").replace(\"px\", \"\");\r\n        const height = +d3.select(\"#flightRoute\").style(\"height\").replace(\"px\", \"\");\r\n\r\n        d3.select('#flightRoute').selectAll('*').remove();\r\n\r\n        if (!geoData || !geoData.features || !Array.isArray(geoData.features)) {\r\n            console.error(\"Invalid GeoJSON data:\", geoData);\r\n            return;\r\n        }\r\n\r\n        const zoomBehavior = d3.zoom()\r\n            .scaleExtent([1, 2])\r\n            .on('zoom', (event) => {\r\n                g.attr('transform', event.transform);\r\n            });\r\n\r\n        const svg = d3.select('#flightRoute')\r\n\r\n        svg.append(\"text\")\r\n            .attr(\"x\", width / 2)\r\n            .attr(\"y\", 20)\r\n            .attr(\"text-anchor\", \"middle\")\r\n            .style(\"font-size\", \"26px\")\r\n            .text(\"Airports & Flight Routes\")\r\n            .attr(\"fill\", \"#003366\")\r\n            .style(\"font-weight\", \"bold\")\r\n\r\n        const g = svg.append('g').attr('transform', `translate(0, 0)`);;\r\n        const projection = d3.geoAlbersUsa().fitSize([width, height-50], geoData);\r\n        const path = d3.geoPath().projection(projection);\r\n\r\n        g.selectAll('path')\r\n            .data(geoData.features)\r\n            .enter()\r\n            .append('path')\r\n            .attr('d', path)\r\n            .attr('fill', '#d3d3d3')\r\n            .attr('stroke', '#000')\r\n            .attr('stroke-width', 0.5);\r\n\r\n        const cityCircles = g.selectAll('circle')\r\n            .data(cityData)\r\n            .enter()\r\n            .append('circle')\r\n            .attr('cx', d => {\r\n                const coordinates = projection([d.Longitude, d.Latitude]);\r\n                if (coordinates) return coordinates[0];\r\n                return null;\r\n            })\r\n            .attr('cy', d => {\r\n                const coordinates = projection([d.Longitude, d.Latitude]);\r\n                if (coordinates) return coordinates[1];\r\n                return null;\r\n            })\r\n            .attr('r', 4)\r\n            .attr('fill', d => d.color)\r\n            .attr('stroke', 'black')\r\n            .attr('stroke-width', 0.5)\r\n            .attr('class', 'city-circle')\r\n            .on('click', (event, d) => {\r\n                event.stopPropagation();\r\n                d3.selectAll('.city-circle')\r\n                    .attr('r', 4)\r\n                    .attr('stroke', 'black')\r\n                    .attr('stroke-width', 0.5)\r\n                    .style('filter', 'none');\r\n                d3.select(event.currentTarget)\r\n                    .attr('r', 8)\r\n                    .attr('stroke', '#FFD700')\r\n                    .attr('stroke-width', 3)\r\n                    .style('filter', 'drop-shadow(0px 0px 8px #FFD700)');\r\n                setSelectedAirport(d);\r\n                drawRoutes(g, projection, flightRoutes, cityData, d.Latitude, d.Longitude);\r\n                onSelectAirport(d);\r\n            })\r\n            .on('mouseover', (event, d) => {\r\n                d3.select('#tooltip-route')\r\n                    .style('left', `${event.pageX + 10}px`)\r\n                    .style('top', `${event.pageY + 10}px`)\r\n                    .style('visibility', 'visible')\r\n                    .html(`<strong>${d.city_name}</strong><br/>\r\n                           <strong>Departures:</strong> ${d.departure_count}<br/>\r\n                           <strong>Arrivals:</strong> ${d.arrival_count}<br/>`);\r\n            })\r\n            .on('mouseout', () => {\r\n                d3.select('#tooltip-route').style('visibility', 'hidden');\r\n            });\r\n\r\n        if (!d3.select('#tooltip-route').node()) {\r\n            d3.select('body').append('div')\r\n                .attr('id', 'tooltip-route')\r\n                .style('position', 'absolute')\r\n                .style('background', '#fff')\r\n                .style('padding', '5px')\r\n                .style('border', '1px solid #ccc')\r\n                .style('border-radius', '5px')\r\n                .style('visibility', 'hidden');\r\n        }\r\n\r\n        const legendData = [\r\n            { label: 'Airports (< 50,000 passengers)', color: 'gold' },\r\n            { label: 'Airports (50,000 - 200,000 passengers)', color: 'red' },\r\n            { label: 'Airports (>= 200,000 passengers)', color: 'navy' }\r\n        ];\r\n        const legendGroup = svg.append('g')\r\n            .attr('id', 'legend')\r\n            .attr('transform', `translate(${width - 750}, ${height - 30})`);\r\n        legendGroup.selectAll('g')\r\n            .data(legendData)\r\n            .enter()\r\n            .append('g')\r\n            .attr('transform', (d, i) => `translate(${i * 250}, 0)`)\r\n            .each(function (d) {\r\n                d3.select(this).append('rect')\r\n                    .attr('width', 15)\r\n                    .attr('height', 15)\r\n                    .attr('fill', d.color)\r\n                    .attr('stroke', 'black');\r\n\r\n                d3.select(this).append('text')\r\n                    .attr('x', 25)\r\n                    .attr('y', 12)\r\n                    .attr('fill', 'black')\r\n                    .style('font-size', '12px')\r\n                    .text(d.label);\r\n            });\r\n\r\n        svg.on('click', (event) => {\r\n            const isCircle = event.target.tagName === 'circle';\r\n            if (!isCircle) {\r\n                resetMap(g, cityData);\r\n            }\r\n        });\r\n    };\r\n\r\n    const drawRoutes = (g, projection, flightRoutes, cityData, originLat, originLng) => {\r\n        const routes = flightRoutes.filter(route =>\r\n            Math.abs(+route.ORIGIN_LAT - originLat) < 0.0001 &&\r\n            Math.abs(+route.ORIGIN_LNG - originLng) < 0.0001\r\n        );\r\n\r\n        const destinationPoints = new Set(\r\n            routes.map(route => `${route.DEST_LAT},${route.DEST_LNG}`)\r\n        );\r\n\r\n        g.selectAll('.city-circle')\r\n            .style('visibility', d => {\r\n                const coordinates = `${d.Latitude},${d.Longitude}`;\r\n                return (\r\n                    Math.abs(+d.Latitude - originLat) < 0.0001 &&\r\n                    Math.abs(+d.Longitude - originLng) < 0.0001\r\n                ) || destinationPoints.has(coordinates)\r\n                    ? 'visible'\r\n                    : 'hidden';\r\n            });\r\n\r\n        g.selectAll('.route-line').remove();\r\n\r\n        g.selectAll('.route-line')\r\n            .data(routes)\r\n            .enter()\r\n            .append('path')\r\n            .attr('d', d => {\r\n                const [x1, y1] = projection([+d.ORIGIN_LNG, +d.ORIGIN_LAT]);\r\n                const [x2, y2] = projection([+d.DEST_LNG, +d.DEST_LAT]);\r\n                const midX = (x1 + x2) / 2;\r\n                const midY = (y1 + y2) / 2 - 50;\r\n                return d3.line()\r\n                    .curve(d3.curveBasis)([\r\n                        [x1, y1],\r\n                        [midX, midY],\r\n                        [x2, y2],\r\n                    ]);\r\n            })\r\n            .attr('fill', 'none')\r\n            .attr('stroke', '#348cbb')\r\n            .attr('opacity', 0.5)\r\n            .attr('stroke-width', 1)\r\n            .attr('class', 'route-line');\r\n    };\r\n\r\n    const resetMap = (g, cityData) => {\r\n        setSelectedAirport(null);\r\n        g.selectAll('.route-line').remove();\r\n        g.selectAll('.city-circle').style('visibility', 'visible')\r\n            .attr('r', 4)\r\n            .attr('stroke', 'black')\r\n            .attr('stroke-width', 0.5)\r\n            .style('filter', 'none');\r\n        onSelectAirport(null);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <svg id=\"flightRoute\"></svg>\r\n            <p class=\"flightRouteText\">The above chart allows you to select any airport, represented by a dot, to uncover the specific flight routes it connects to. This reveals the pathways passengers traverse and highlights the airport's role within the broader network. Simultaneously, the adjacent sunburst chart dynamically updates to reflect data for the selected airport, offering deeper insights into delays, cancellations, and divergences tied to that location.</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FlightRoute;\r\n\r\n"],"names":["FlightRoute","selectedAirport","setSelectedAirport","useState","onSelectAirport","useContext","AirportContext","useEffect","Promise","all","d3","then","_ref","geoData","cityData","flightRoutes","processCityData","renderFlightRoute","catch","error","console","forEach","d","departure_count","arrival_count","total_passenger_count","category","color","width","style","replace","height","selectAll","remove","features","Array","isArray","scaleExtent","on","event","g","attr","transform","svg","append","text","projection","fitSize","path","data","enter","coordinates","Longitude","Latitude","stopPropagation","currentTarget","drawRoutes","pageX","pageY","html","city_name","node","label","i","each","this","target","tagName","resetMap","originLat","originLng","routes","filter","route","Math","abs","ORIGIN_LAT","ORIGIN_LNG","destinationPoints","Set","map","DEST_LAT","DEST_LNG","has","x1","y1","x2","y2","midX","midY","curve","_jsxs","children","_jsx","id","class"],"sourceRoot":""}