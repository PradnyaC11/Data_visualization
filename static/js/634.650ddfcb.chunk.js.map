{"version":3,"file":"static/js/634.650ddfcb.chunk.js","mappings":"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","sources":["components/SafetyVsAccidents.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport * as d3 from 'd3';\r\nimport '../styles/SafetyVsAccidents.css';\r\n\r\nconst SafetyVsAccidents = () => {\r\n    useEffect(() => {\r\n        const accidentDataPath = `${process.env.PUBLIC_URL}/data/accident_data.csv`;\r\n        const safetyDataPath = `${process.env.PUBLIC_URL}/data/Safety_measures.csv`;\r\n        const yearCountDataPath = `${process.env.PUBLIC_URL}/data/Total_Passengers_Count_by_Year.csv`;\r\n\r\n        Promise.all([\r\n            d3.csv(accidentDataPath),\r\n            d3.csv(safetyDataPath),\r\n            d3.csv(yearCountDataPath)\r\n        ]).then(([accidentData, safetyData, yearCountData]) => {\r\n            const annualAccidents = d3.rollups(\r\n                accidentData,\r\n                group => {\r\n                    const fatalInjuries = d3.sum(group, d => +d[\"Total.Fatal.Injuries\"]);\r\n                    const seriousInjuries = d3.sum(group, d => +d[\"Total.Serious.Injuries\"]);\r\n                    const minorInjuries = d3.sum(group, d => +d[\"Total.Minor.Injuries\"]);\r\n                    const totalInjuries = d3.sum(group, d => +d['Total.Injuries']);\r\n                    return { fatalInjuries, seriousInjuries, minorInjuries, totalInjuries };\r\n                },\r\n                d => +d['Event.Year']\r\n            ).map(([year, { fatalInjuries, seriousInjuries, minorInjuries, totalInjuries }]) => ({\r\n                year,\r\n                fatalInjuries,\r\n                seriousInjuries,\r\n                minorInjuries,\r\n                totalInjuries\r\n            })).sort((a, b) => a.year - b.year).filter(d => +d.year >= 2000);\r\n\r\n            const yearCountMap = new Map();\r\n            yearCountData.forEach(d => {\r\n                const year = +d['Year'];\r\n                const count = +d['Total_Passenger_Count'];\r\n                yearCountMap.set(year, count);\r\n            });\r\n            const annualAccidentsWithPercentages = annualAccidents.map(d => {\r\n                const totalCount = yearCountMap.get(d.year);\r\n                if (totalCount) {\r\n                    return {\r\n                        ...d,\r\n                        fatalInjuriesPercentage: (d.fatalInjuries / totalCount) * 100,\r\n                        seriousInjuriesPercentage: (d.seriousInjuries / totalCount) * 100,\r\n                        minorInjuriesPercentage: (d.minorInjuries / totalCount) * 100,\r\n                        totalInjuriesPercentage: (d.totalInjuries / totalCount) * 100\r\n                    };\r\n                }\r\n            });\r\n            const safetyMeasures = safetyData\r\n                .filter(d => +d.Year >= 2000)\r\n                .map(d => ({\r\n                    year: +d.Year,\r\n                    measure: d['Safety Measure'],\r\n                }));\r\n\r\n            createVisualization(annualAccidentsWithPercentages, safetyMeasures);\r\n        }).catch(err => console.error(\"Error loading datasets: \", err));\r\n    }, []);\r\n\r\n    const createVisualization = (annualAccidentsWithPercentages, safetyMeasures) => {\r\n        const svg = d3.select('#safetyVsAccidents');\r\n        const width = +svg.style(\"width\").replace(\"px\", \"\");\r\n        const height = +svg.style(\"height\").replace(\"px\", \"\");\r\n        const margin = { top: 50, right: 50, bottom: 100, left: 50 };\r\n\r\n        const xScale = d3.scaleLinear()\r\n            .domain([2000, 2010, 2020, 2023])\r\n            .range([\r\n                margin.left,\r\n                (width - margin.right) * 0.3,  \r\n                (width - margin.right) * 0.90, \r\n                width - margin.right           \r\n            ]);\r\n\r\n        const yScale = d3.scaleLinear()\r\n            .domain([0, Math.max(d3.max(annualAccidentsWithPercentages, d => d.fatalInjuriesPercentage),\r\n                d3.max(annualAccidentsWithPercentages, d => d.seriousInjuriesPercentage),\r\n                d3.max(annualAccidentsWithPercentages, d => d.minorInjuriesPercentage)) + 0.00001])\r\n            .range([height - margin.bottom, margin.top]);\r\n\r\n        const xAxis = d3.axisBottom(xScale).tickFormat(d3.format('d'));\r\n        const yAxis = d3.axisLeft(yScale);\r\n\r\n        svg.append('g')\r\n            .attr('transform', `translate(0,${height - margin.bottom})`)\r\n            .call(xAxis)\r\n            .attr('class', 'x-axis')\r\n            .selectAll('text')\r\n            .remove();\r\n\r\n        svg.selectAll('.x-axis line')\r\n            .style('display', 'none');\r\n\r\n        svg.append('g')\r\n            .attr('transform', `translate(${margin.left},0)`)\r\n            .call(yAxis)\r\n            .attr('class', 'y-axis');\r\n\r\n        const fatalInjuriesLine = d3.line()\r\n            .x(d => xScale(d.year))\r\n            .y(d => yScale(d.fatalInjuriesPercentage))\r\n            .curve(d3.curveMonotoneX);\r\n\r\n        var tooltip = d3.select(\".tooltip-safety-accidents\");\r\n\r\n        svg.append('path')\r\n            .datum(annualAccidentsWithPercentages)\r\n            .attr('class', 'line')\r\n            .attr('fill', 'none')\r\n            .attr('stroke', '#FF0000')\r\n            .attr('stroke-width', 5)\r\n            .attr('d', fatalInjuriesLine)\r\n            .on('mouseover', (event, d) => {\r\n                const svgRect = d3.select(\"#safetyVsAccidents\").node().getBoundingClientRect();\r\n                tooltip\r\n                .style('left', `${event.clientX - svgRect.left  + 50}px`)\r\n                        .style('top', `${event.clientY - svgRect.top+100}px`)\r\n                .style('visibility', \"visible\");\r\n            })\r\n            .on('mousemove', (event, d) => {\r\n                const year = Math.round(xScale.invert(d3.pointer(event)[0]));\r\n                const svgRect = d3.select(\"#safetyVsAccidents\").node().getBoundingClientRect();\r\n                const yearData = annualAccidentsWithPercentages.find(data => data.year === year);\r\n                if (yearData) {\r\n                    tooltip\r\n                    .style('left', `${event.clientX - svgRect.left  + 50}px`)\r\n                    .style('top', `${event.clientY - svgRect.top +100}px`)\r\n                        .style('visibility', \"visible\")\r\n                        .html(`\r\n                            <strong>Year:</strong> ${yearData.year}<br>\r\n                            <strong>Fatal Injuries:</strong> ${yearData.fatalInjuries}<br>\r\n                            <strong>Serious Injuries:</strong> ${yearData.seriousInjuries}<br>\r\n                            <strong>Minor Injuries:</strong> ${yearData.minorInjuries}\r\n                        `);\r\n                }\r\n            })\r\n            .on('mouseout', () => {\r\n                tooltip.style('visibility', \"hidden\"); \r\n            });\r\n\r\n        const seriousInjuriesLine = d3.line()\r\n            .x(d => xScale(d.year))\r\n            .y(d => yScale(d.seriousInjuriesPercentage))\r\n            .curve(d3.curveMonotoneX);\r\n\r\n        svg.append('path')\r\n            .datum(annualAccidentsWithPercentages)\r\n            .attr('class', 'line')\r\n            .attr('fill', 'none')\r\n            .attr('stroke', '#FFA500')\r\n            .attr('stroke-width', 2)\r\n            .attr('d', seriousInjuriesLine)\r\n            .on('mouseover', (event, d) => {\r\n                const svgRect = d3.select(\"#safetyVsAccidents\").node().getBoundingClientRect();\r\n                tooltip\r\n                .style('left', `${event.clientX - svgRect.left  + 50}px`)\r\n                        .style('top', `${event.clientY - svgRect.top +100}px`)\r\n                .style('visibility', \"visible\");\r\n            })\r\n            .on('mousemove', (event, d) => {\r\n                const year = Math.round(xScale.invert(d3.pointer(event)[0]));\r\n                const svgRect = d3.select(\"#safetyVsAccidents\").node().getBoundingClientRect();\r\n                const yearData = annualAccidentsWithPercentages.find(data => data.year === year);\r\n                if (yearData) {\r\n                    tooltip\r\n                    .style('left', `${event.clientX - svgRect.left  + 50}px`)\r\n                    .style('top', `${event.clientY - svgRect.top+100 }px`)\r\n                        .style('visibility', \"visible\")\r\n                        .html(`\r\n                            <strong>Year:</strong> ${yearData.year}<br>\r\n                            <strong>Fatal Injuries:</strong> ${yearData.fatalInjuries}<br>\r\n                            <strong>Serious Injuries:</strong> ${yearData.seriousInjuries}<br>\r\n                            <strong>Minor Injuries:</strong> ${yearData.minorInjuries}\r\n                        `);\r\n                }\r\n            })\r\n            .on('mouseout', () => {\r\n                tooltip.style('visibility', \"hidden\"); \r\n            });\r\n\r\n        const minorInjuriesLine = d3.line()\r\n            .x(d => xScale(d.year))\r\n            .y(d => yScale(d.minorInjuriesPercentage))\r\n            .curve(d3.curveMonotoneX);\r\n\r\n        svg.append('path')\r\n            .datum(annualAccidentsWithPercentages)\r\n            .attr('class', 'line')\r\n            .attr('fill', 'none')\r\n            .attr('stroke', '#32CD32')\r\n            .attr('stroke-width', 2)\r\n            .attr('d', minorInjuriesLine)\r\n            .on('mouseover', (event, d) => {\r\n                const svgRect = d3.select(\"#safetyVsAccidents\").node().getBoundingClientRect();\r\n                tooltip\r\n                .style('left', `${event.clientX - svgRect.left  + 50}px`)\r\n                        .style('top', `${event.clientY - svgRect.top +100}px`)\r\n                .style('visibility', \"visible\");\r\n            })\r\n            .on('mousemove', (event, d) => {\r\n                const year = Math.round(xScale.invert(d3.pointer(event)[0]));\r\n                const svgRect = d3.select(\"#safetyVsAccidents\").node().getBoundingClientRect();\r\n                const yearData = annualAccidentsWithPercentages.find(data => data.year === year);\r\n                if (yearData) {\r\n                    tooltip\r\n                        .style('left', `${event.clientX - svgRect.left  + 50}px`)\r\n                        .style('top', `${event.clientY - svgRect.top +100}px`)\r\n                        .style('visibility', \"visible\")\r\n                        .html(`\r\n                            <strong>Year:</strong> ${yearData.year}<br>\r\n                            <strong>Fatal Injuries:</strong> ${yearData.fatalInjuries}<br>\r\n                            <strong>Serious Injuries:</strong> ${yearData.seriousInjuries}<br>\r\n                            <strong>Minor Injuries:</strong> ${yearData.minorInjuries}\r\n                        `);\r\n                }\r\n            })\r\n            .on('mouseout', () => {\r\n                tooltip.style('visibility', \"hidden\"); \r\n            });\r\n        safetyMeasures.forEach((safety, index) => {\r\n            const xPosition = xScale(safety.year);\r\n            const yPosition = height - margin.bottom;\r\n            const offset = index % 2 === 0 ? 40 : 60;\r\n            svg.append('circle')\r\n                .attr('cx', xPosition)\r\n                .attr('cy', yPosition + 10)\r\n                .attr('r', 6)\r\n                .attr('fill', 'red');\r\n            svg.append('line')\r\n                .attr('x1', xPosition)\r\n                .attr('y1', () => {\r\n                    const yearData = annualAccidentsWithPercentages.filter((d) => d.year === safety.year)[0]\r\n                    if (yearData) {\r\n                        return yScale(Math.max(yearData.fatalInjuriesPercentage, yearData.seriousInjuriesPercentage, yearData.minorInjuriesPercentage))\r\n                    } else {\r\n                        return yScale(0)\r\n                    }\r\n                })\r\n                .attr('x2', xPosition)\r\n                .attr('y2', yPosition + offset - 20)\r\n                .attr('stroke', 'black')\r\n                .attr('stroke-width', 1);\r\n            svg.append('text')\r\n                .attr('x', xPosition)\r\n                .attr('y', yPosition + offset)\r\n                .attr('text-anchor', 'middle')\r\n                .style('font-size', '12px')\r\n                .style('font-weight', 'bold')\r\n                .style('fill', 'black')\r\n                .text(safety.year)\r\n            svg.append('text')\r\n                .attr('x', xPosition)\r\n                .attr('y', yPosition + offset + 15)\r\n                .attr('text-anchor', 'middle')\r\n                .style('font-size', '10px')\r\n                .style('fill', 'black')\r\n                .style('fill', '#555')\r\n                .text(safety.measure)\r\n                .call(wrap, 90);\r\n        });\r\n\r\n        const yGrid = d3.axisLeft(yScale)\r\n            .tickSize(-width + margin.left + margin.right)\r\n            .tickFormat('')\r\n            .ticks(10);\r\n\r\n        svg.append('g')\r\n            .attr('class', 'grid')\r\n            .attr('transform', `translate(${margin.left},0)`)\r\n            .call(yGrid)\r\n            .selectAll('line')\r\n            .attr('stroke', '#ccc')\r\n            .attr('stroke-dasharray', '2,2');\r\n\r\n\r\n        const legend = svg.append('g')\r\n            .attr('class', 'legend')\r\n            .attr('transform', `translate(${width - 250}, ${margin.top + 20})`);\r\n\r\n        legend.append('line')\r\n            .attr('x1', 0)\r\n            .attr('y1', 20)\r\n            .attr('x2', 30)\r\n            .attr('y2', 20)\r\n            .attr('stroke', '#FF0000')\r\n            .attr('stroke-width', 2);\r\n\r\n        legend.append('text')\r\n            .attr('x', 40)\r\n            .attr('y', 25)\r\n            .attr('text-anchor', 'start')\r\n            .style('font-size', '15px')\r\n            .text('Fatal Injuries');\r\n\r\n        legend.append('line')\r\n            .attr('x1', 0)\r\n            .attr('y1', 40)\r\n            .attr('x2', 30)\r\n            .attr('y2', 40)\r\n            .attr('stroke', '#FFA500')\r\n            .attr('stroke-width', 2);\r\n\r\n        legend.append('text')\r\n            .attr('x', 40)\r\n            .attr('y', 45)\r\n            .attr('text-anchor', 'start')\r\n            .style('font-size', '15px')\r\n            .text('Serious Injuries');\r\n\r\n        legend.append('line')\r\n            .attr('x1', 0)\r\n            .attr('y1', 60)\r\n            .attr('x2', 30)\r\n            .attr('y2', 60)\r\n            .attr('stroke', '#32CD32')\r\n            .attr('stroke-width', 2);\r\n\r\n        legend.append('text')\r\n            .attr('x', 40)\r\n            .attr('y', 65)\r\n            .attr('text-anchor', 'start')\r\n            .style('font-size', '15px')\r\n            .text('Minor Injuries');\r\n\r\n        legend.append('circle')\r\n            .attr('cx', 15)\r\n            .attr('cy', 0)\r\n            .attr('r', 6)\r\n            .attr('fill', 'red');\r\n\r\n        legend.append('text')\r\n            .attr('x', 40)\r\n            .attr('y', 5)\r\n            .attr('text-anchor', 'start')\r\n            .style('font-size', '15px')\r\n            .text('Safety Measures');\r\n\r\n        d3.select('body')\r\n            .append('div')\r\n            .attr('class', 'tooltip-safety-accidents')\r\n            .style('position', 'absolute')\r\n            .style('opacity', 0)\r\n            .style('background', '#fff')\r\n            .style('padding', '5px')\r\n            .style('border', '1px solid #ccc')\r\n            .style('border-radius', '5px');\r\n\r\n        svg.append(\"text\")\r\n            .attr(\"x\", width / 2)\r\n            .attr(\"y\", 30)\r\n            .attr(\"text-anchor\", \"middle\")\r\n            .style(\"font-size\", \"26px\")\r\n            .text(\"Safety Measures V/s Accidents\")\r\n            .attr(\"fill\", \"#003366\")\r\n            .style(\"font-weight\", \"bold\")\r\n    };\r\n\r\n    const wrap = (text, width) => {\r\n        text.each(function () {\r\n            const text = d3.select(this);\r\n            const words = text.text().split(/\\s+/).reverse();\r\n            let word;\r\n            let line = [];\r\n            const lineHeight = 1.1; \r\n            const x = text.attr('x');\r\n            const y = text.attr('y');\r\n            let tspan = text.text(null).append('tspan').attr('x', x).attr('y', y);\r\n            let lineNumber = 0;\r\n\r\n            while ((word = words.pop())) {\r\n                line.push(word);\r\n                tspan.text(line.join(' '));\r\n                if (tspan.node().getComputedTextLength() > width) {\r\n                    line.pop();\r\n                    tspan.text(line.join(' '));\r\n                    line = [word];\r\n                    tspan = text.append('tspan')\r\n                        .attr('x', x)\r\n                        .attr('y', y)\r\n                        .attr('dy', `${++lineNumber * lineHeight}em`)\r\n                        .text(word);\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <p className=\"safetyVsAccidentText\">The below visualization highlights the remarkable correlation between the implementation of key safety measures and the steady decline in aviation accidents over time. Each milestone, marked by red points, represents a critical safety enhancement that has shaped the modern aviation landscape. Measures like reinforced cockpit doors and advanced tracking systems have addressed critical vulnerabilities, while initiatives like Fatigue Risk Management and Safety Management Systems have focused on human and operational factors. Despite challenges such as the COVID-19 pandemic, the industry has demonstrated resilience and a commitment to innovation, adapting to evolving risks. This timeline is a testament to how continuous advancements in technology, regulation, and practices have reshaped the landscape of aviation safety.</p>\r\n            <svg id=\"safetyVsAccidents\"></svg>\r\n            <div className='tooltip-safety-accidents' style={{ position: \"absolute\", visibility: \"hidden\" }}></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SafetyVsAccidents;\r\n"],"names":["SafetyVsAccidents","useEffect","Promise","all","d3","then","_ref","accidentData","safetyData","yearCountData","annualAccidents","group","fatalInjuries","d","seriousInjuries","minorInjuries","totalInjuries","map","_ref2","year","sort","a","b","filter","yearCountMap","Map","forEach","count","set","annualAccidentsWithPercentages","totalCount","get","fatalInjuriesPercentage","seriousInjuriesPercentage","minorInjuriesPercentage","totalInjuriesPercentage","safetyMeasures","Year","measure","createVisualization","catch","err","console","error","svg","width","style","replace","height","margin","xScale","domain","range","yScale","Math","max","xAxis","tickFormat","yAxis","append","attr","call","selectAll","remove","fatalInjuriesLine","x","y","curve","tooltip","datum","on","event","svgRect","node","getBoundingClientRect","clientX","left","clientY","top","round","invert","yearData","find","data","html","seriousInjuriesLine","minorInjuriesLine","safety","index","xPosition","yPosition","offset","text","wrap","yGrid","tickSize","ticks","legend","each","this","words","split","reverse","word","line","tspan","lineNumber","pop","push","join","getComputedTextLength","_jsxs","children","_jsx","className","id","position","visibility"],"sourceRoot":""}